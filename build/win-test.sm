	.file	win-test.sm
	.comment
**	Simple Compilation Compiler Code
**	File standard infomation comment
**	END of comment prelude.
	.code
001	MOV	$0,	%eax
002	LOD	%eip
003	MOV	$0,	%ebp
004	MOV	$5,	%esp
**	-> assign
005	MOV	$7,	%eax
006	MOV	%eax,	%ebx
007	MOV	$1,	%eax
008	ADD	%ebx,	%eax
009	MOV	%eax,	%ebp
**	store assign result to a
**	<- assign
010	MOV	$0,	%eax
**	-> assign
011	MOV	%ebp,	%eax
012	MOV	%eax,	1(%ebp)
**	store assign result to b
**	<- assign
013	MOV	$0,	%eax
**	-> assign
014	MOV	$8,	%eax
015	MOV	%eax,	%ebx
016	MOV	%ebp,	%eax
017	MOV	%eax,	%ecx
018	MOV	1(%ebp),	%eax
019	MUL	%ecx,	%eax
020	ADD	%ebx,	%eax
021	MOV	%eax,	2(%ebp)
**	store assign result to c
**	<- assign
022	MOV	$0,	%eax
**	-> operator
023	MOV	$3,	%eax
024	MOV	2(%ebp),	%ebx
025	MUL	%eax,	%ebx
026	MOV	%ebx,	2(%ebp)
**	<- operator
027	MOV	$0,	%eax
**	-> operator
028	MOV	$8,	%eax
029	MOV	2(%ebp),	%ebx
030	MOV	%ebx,	%ecx
031	DIV	%eax,	%ecx
032	ADD	%ecx,	%ebx
033	MOV	%ebx,	2(%ebp)
**	<- operator
034	MOV	$0,	%eax
**	-> output
035	MOV	%ebp,	%eax
036	MOV	%eax,	%ebx
037	MOV	2(%ebp),	%eax
038	ADD	%ebx,	%eax
039	MOV	%eax,	%esp
040	CALL	OUT
**	<- output
041	MOV	$0,	%eax
042	RET
043	HALT	$0,	$0
**	END of File comment
